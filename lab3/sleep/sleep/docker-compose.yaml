version: '3.8'

services:
#  frontend:
#    build: ./frontend
#    ports:
#      - "80:80"
#      - "443:443"
#    depends_on:
#      - api
#    networks:
#      - app-network
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://localhost/ || exit 1"]
#      interval: 10s
#      timeout: 5s
#      retries: 3
#      start_period: 15s

  api:
    build: ./api
    ports:
      - "8080:8080"
    depends_on:
      - rabbitmq
    environment:
      - RABBITMQ_HOST=rabbitmq
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s

  logic:
    build: ./logic
    depends_on:
      - rabbitmq
      - postgres
    networks:
      - app-network
    environment: # Добавляем переменные окружения для подключения к базе
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "8082:8080"

  worker:
    build: ./worker
    depends_on:
      - rabbitmq
      - postgres
    networks:
      - app-network
    environment: # Добавляем переменные окружения для подключения к базе
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "8081:8080"

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - app-network
    volumes:
      - ./rabbitmq/config/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:13
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U application"]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
